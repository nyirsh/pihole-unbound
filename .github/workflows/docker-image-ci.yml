name: Docker Image CI

env:
  VERSION:

on:
  push:
    branches:
      - main
    paths:
      - Dockerfile
  pull_request:
    types:
      - closed
    branches:
      - main
    paths:
      - Dockerfile
  workflow_dispatch:
  workflow_run:
    workflows: ["Dependabot auto-merge"]
    types:
      - completed

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install the cosign tool
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        uses: sigstore/cosign-installer@v3.8.1
        with:
          cosign-release: "v2.2.4"

      - name: Set Tag Suffix
        if: github.ref == 'refs/heads/experimental'
        run: echo "SUFFIX=-experimental" >> $GITHUB_ENV

      - name: Extract Tag from Dockerfile
        id: read-version
        run: |
          TAG=$(grep -m 1 '^FROM pihole/pihole:' Dockerfile | cut -d ':' -f 2)
          echo "VERSION=${TAG}${SUFFIX}" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to Github Container Registry (GHCR)
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5.7.0
        with:
          # List of Docker images to use as base name for tags
          images: |
            docker.io/${{ github.repository_owner }}/pihole-unbound
            ghcr.io/${{ github.repository_owner }}/pihole-unbound
          # Generate Docker tags based on the following events/attributes
          tags: |
            type=raw,value=${{ env.VERSION }}
            ${{ github.ref == 'refs/heads/main' && 'type=raw,value=latest' || '' }}
          # Set the OCI Image Specification source label to the base image repository, to enable tools
          # like Renovate and Dependabot to automatically fetch release notes for new versions.
          # We cannot use https://github.com/pi-hole/pi-hole directly, since it uses a different versioning scheme.
          labels: |
            org.opencontainers.image.source=https://github.com/pi-hole/docker-pi-hole

      - name: Build and Push Docker Image
        id: build-and-push
        uses: docker/build-push-action@v6.15.0
        with:
          context: ./pihole-unbound
          file: ./Dockerfile
          push: true
          build-args: VERSION=${{ env.VERSION }}
          platforms: linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Sign the published Docker image
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

      - name: Create Release
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v2.2.2
        with:
          name: ${{ env.VERSION }}
          tag_name: ${{ env.VERSION }}
          draft: false
          prerelease: false
          make_latest: true
          body: |
            Updated PiHole image to ${{ env.VERSION }}, for a full list of changelogs please refer to [this link](https://github.com/pi-hole/docker-pi-hole/releases/tag/${{ env.VERSION }})
          token: ${{ secrets.GITHUB_TOKEN }}
